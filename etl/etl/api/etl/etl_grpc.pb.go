// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: etl/etl.proto

package etl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EtlClient is the client API for Etl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtlClient interface {
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	MigrateData(ctx context.Context, in *MigrateDataRequest, opts ...grpc.CallOption) (*MigrateDataResponse, error)
}

type etlClient struct {
	cc grpc.ClientConnInterface
}

func NewEtlClient(cc grpc.ClientConnInterface) EtlClient {
	return &etlClient{cc}
}

func (c *etlClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/etl.etl/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etlClient) MigrateData(ctx context.Context, in *MigrateDataRequest, opts ...grpc.CallOption) (*MigrateDataResponse, error) {
	out := new(MigrateDataResponse)
	err := c.cc.Invoke(ctx, "/etl.etl/MigrateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtlServer is the server API for Etl service.
// All implementations must embed UnimplementedEtlServer
// for forward compatibility
type EtlServer interface {
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error)
	MigrateData(context.Context, *MigrateDataRequest) (*MigrateDataResponse, error)
	mustEmbedUnimplementedEtlServer()
}

// UnimplementedEtlServer must be embedded to have forward compatible implementations.
type UnimplementedEtlServer struct {
}

func (UnimplementedEtlServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedEtlServer) MigrateData(context.Context, *MigrateDataRequest) (*MigrateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateData not implemented")
}
func (UnimplementedEtlServer) mustEmbedUnimplementedEtlServer() {}

// UnsafeEtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtlServer will
// result in compilation errors.
type UnsafeEtlServer interface {
	mustEmbedUnimplementedEtlServer()
}

func RegisterEtlServer(s grpc.ServiceRegistrar, srv EtlServer) {
	s.RegisterService(&Etl_ServiceDesc, srv)
}

func _Etl_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtlServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etl.etl/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtlServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Etl_MigrateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtlServer).MigrateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etl.etl/MigrateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtlServer).MigrateData(ctx, req.(*MigrateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Etl_ServiceDesc is the grpc.ServiceDesc for Etl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Etl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etl.etl",
	HandlerType: (*EtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _Etl_CreateDatabase_Handler,
		},
		{
			MethodName: "MigrateData",
			Handler:    _Etl_MigrateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "etl/etl.proto",
}
